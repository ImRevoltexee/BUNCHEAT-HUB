-- ==================== LOADING SCREEN ====================
local LoadingScreen = Instance.new("ScreenGui")
LoadingScreen.Name = "BUNCHEATS_Loading"
LoadingScreen.Parent = game:GetService("CoreGui")
LoadingScreen.ResetOnSpawn = false
LoadingScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local LoadingFrame = Instance.new("Frame")
LoadingFrame.Size = UDim2.new(0, 350, 0, 120)
LoadingFrame.Position = UDim2.new(0.5, -175, 0.5, -60)
LoadingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
LoadingFrame.BorderSizePixel = 0
LoadingFrame.Parent = LoadingScreen

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = LoadingFrame

local LoadingTitle = Instance.new("TextLabel")
LoadingTitle.Size = UDim2.new(1, -20, 0, 30)
LoadingTitle.Position = UDim2.new(0, 10, 0, 10)
LoadingTitle.Text = "BUNCHEATS-HUB"
LoadingTitle.Font = Enum.Font.GothamBold
LoadingTitle.TextSize = 20
LoadingTitle.TextColor3 = Color3.fromRGB(173, 216, 230)
LoadingTitle.BackgroundTransparency = 1
LoadingTitle.Parent = LoadingFrame

local LoadingText = Instance.new("TextLabel")
LoadingText.Size = UDim2.new(1, -20, 0, 25)
LoadingText.Position = UDim2.new(0, 10, 0, 45)
LoadingText.Text = "Initializing..."
LoadingText.Font = Enum.Font.Gotham
LoadingText.TextSize = 14
LoadingText.TextColor3 = Color3.fromRGB(200, 200, 200)
LoadingText.BackgroundTransparency = 1
LoadingText.Parent = LoadingFrame

local ProgressBar = Instance.new("Frame")
ProgressBar.Size = UDim2.new(1, -40, 0, 6)
ProgressBar.Position = UDim2.new(0, 20, 0, 85)
ProgressBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
ProgressBar.BorderSizePixel = 0
ProgressBar.Parent = LoadingFrame

local ProgressBarCorner = Instance.new("UICorner")
ProgressBarCorner.CornerRadius = UDim.new(0, 3)
ProgressBarCorner.Parent = ProgressBar

local ProgressFill = Instance.new("Frame")
ProgressFill.Size = UDim2.new(0, 0, 1, 0)
ProgressFill.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
ProgressFill.BorderSizePixel = 0
ProgressFill.Parent = ProgressBar

local ProgressFillCorner = Instance.new("UICorner")
ProgressFillCorner.CornerRadius = UDim.new(0, 3)
ProgressFillCorner.Parent = ProgressFill

local function updateLoading(text, progress)
    LoadingText.Text = text
    ProgressFill:TweenSize(
        UDim2.new(progress, 0, 1, 0),
        Enum.EasingDirection.Out,
        Enum.EasingStyle.Quad,
        0.3,
        true
    )
    task.wait(0.05)
end

-- ==================== START LOADING ====================
updateLoading("Loading library...", 0.1)

-- Load Modules
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/ImRevoltexee/BUNCHEAT-HUB/refs/heads/main/libgag.lua"))()

updateLoading("Initializing utility...", 0.15)

-- Buat table Utility biar gak nil
local Utility = {}
local Module = {}

updateLoading("Loading services...", 0.2)
task.wait(0.05)

--// Services
Utility.RunService = game:GetService("RunService")
Utility.Players = game:GetService("Players")
Utility.Insert = game:GetService("InsertService")
Utility.ReplicatedStorage = game:GetService("ReplicatedStorage")
Utility.HttpService = game:GetService("HttpService")
Utility.Workspace = game:GetService("Workspace")
Utility.UserInputService = game:GetService("UserInputService")
Utility.TeleportService = game:GetService("TeleportService")
Utility.Lighting = game:GetService("Lighting")

updateLoading("Setting up player data...", 0.25)

--// LocalPlayer
Utility.LocalPlayer = Utility.Players.LocalPlayer
Utility.Character = Utility.LocalPlayer.Character or Utility.LocalPlayer.CharacterAdded:Wait()
Utility.Humanoid = Utility.Character:WaitForChild("Humanoid")
Utility.HumanoidRootPart = Utility.Character:WaitForChild("HumanoidRootPart")
Utility.BackPack = Utility.LocalPlayer:WaitForChild("Backpack")
Utility.PlayerGui = Utility.LocalPlayer:WaitForChild("PlayerGui")
Utility.Mouse = Utility.LocalPlayer:GetMouse()

updateLoading("Loading game data...", 0.3)
task.wait(0.05)

--// Data
Utility.EventData = require(Utility.ReplicatedStorage.Data.EventShopData)
Utility.FruitsData = require(Utility.ReplicatedStorage.Data.SeedData)
Utility.Gears = require(Utility.ReplicatedStorage.Data.GearData)
Utility.Mutations = require(Utility.ReplicatedStorage.Modules.MutationHandler).MutationNames
Utility.MutationHandler = require(Utility.ReplicatedStorage.Modules.MutationHandler)
Utility.EggData = require(Utility.ReplicatedStorage.Data.PetEggData)
Utility.NotificationHandler = require(Utility.ReplicatedStorage.Modules.Notification)
Utility.DataService = require(Utility.ReplicatedStorage.Modules.DataService)
Utility.InventorySerice = require(Utility.ReplicatedStorage.Modules.InventoryService)
Utility.CalculateValue = require(Utility.ReplicatedStorage.Modules.CalculatePlantValue)
Utility.PetServices = Utility.ReplicatedStorage.Modules:WaitForChild("PetServices")
Utility.ActivePetsService = require(Utility.PetServices:WaitForChild("ActivePetsService"))
Utility.PetList = require(Utility.ReplicatedStorage.Data.PetRegistry.PetList)

updateLoading("Processing seeds data...", 0.4)

--//SEEDS :
Utility.Seeds = {}
for seedName, _ in pairs(Utility.FruitsData) do
    table.insert(Utility.Seeds, seedName)
end
table.sort(Utility.Seeds)
if not table.find(Utility.Seeds, "All") then
    table.insert(Utility.Seeds, 1, "All")
end

updateLoading("Setting up positions...", 0.45)

--// Positions
Utility.Positions = {
	["Sell Zone"] = CFrame.new(88.1068573, 2.99999976, 0.248745888, -0.0311789345, 1.51965054e-08, -0.999513805, -7.2054922e-09, 1, 1.54286646e-08, 0.999513805, 7.68303821e-09, -0.0311789345),
	["Middle"] = CFrame.new(-105.796562, 4.40001249, -7.66513491, 0.999132276, 2.76632157e-08, -0.0416502953, -2.98415621e-08, 1, -5.16791125e-08, 0.0416502953, 5.287718e-08, 0.999132276),
	["Gear Shop"] = CFrame.new(-287.435242, 2.99999976, -13.8443823, 0.0547213368, -7.35218553e-09, 0.998501658, -6.09078299e-09, 1, 7.69701369e-09, -0.998501658, -6.50284804e-09, 0.0547213368),
	["Pet Shop"] = CFrame.new(-286.803162, 2.99999976, -2.52812886, 0.0324877948, 1.11254828e-09, 0.999472141, 1.7034979e-09, 1, -1.16850796e-09, -0.999472141, 1.74056092e-09, 0.0324877948),
	["Cosmetics Shop"] = CFrame.new(-286.219788, 2.99999976, -25.2869682, 0.0311784148, 5.00979258e-09, 0.999513865, -7.33615946e-10, 1, -4.98934494e-09, -0.999513865, -5.77699388e-10, 0.0311784148),
	["Crafting Zone"] = CFrame.new(-285.65033, 2.99999976, -34.3859901, 0.00631149486, -8.13705867e-08, 0.999980092, 6.98285829e-09, 1, 8.13281318e-08, -0.999980092, 6.469417e-09, 0.00631149486),
}

updateLoading("Loading crafting recipes...", 0.5)

--// Crafters
Utility.Crafting = {
	["Seed Recipes"] = {
		"Lumira", "Suncoil", "Honeysuckle", "Nectar Thorn", "Crafters Seed Pack",
		"Bee Balm", "Dandelion", "Guanabana", "Peace Lily", "Aloe Vera", "Manuka Flower",
	},
	["Gear Recipes"] = {
		"Lightning Rod", "Reclaimer", "Spice Spritzer Sprinkler", "Sweet Soaker Sprinkler",
		"Stalk Sprout Sprinkler", "Tropical Mist Sprinkler", "Berry Blusher Sprinkler",
		"Flower Froster Sprinkler", "Anti Bee Egg", "Pack Bee", "Honey Crafters Crate",
		"Mutation Spray Choc", "Mutation Spray Pollinated", "Mutation Spray Shocked",
	},
	["Dino Recipes"] = {
		"Ancient Seed Pack", "Mutation Spray Amber", "Dino Crate",
	},
}

updateLoading("Loading folders...", 0.55)

--// Folders
Utility.GameEvents = Utility.ReplicatedStorage:WaitForChild("GameEvents")
Utility.PetAssets = Utility.Insert:LoadLocalAsset("rbxassetid://125322775194286").PetAssets
Utility.ActivePetService = Utility.GameEvents:WaitForChild("ActivePetService")

updateLoading("Processing stocks...", 0.6)

--// Get
Utility.SeedStock = {}
Utility.GearStock = {}
Utility.Fruits = {}
Utility.EventItem = {}

for i, v in pairs(Utility.FruitsData) do
	for i2, v2 in pairs(v) do
		if i2 == "StockAmount" and v2[2] > 0 then
			table.insert(Utility.SeedStock, i)
		end
	end
end

for i, v in pairs(Utility.Gears) do
	for i2, v2 in pairs(v) do
		if i2 == "StockAmount" and v2[2] > 0 then
			table.insert(Utility.GearStock, i)
		end
	end
end

for i, v in pairs(Utility.EventData) do
	table.insert(Utility.EventItem, i)
end

for seedName, _ in pairs(Utility.FruitsData) do
	table.insert(Utility.Fruits, seedName)
end

if not table.find(Utility.Fruits, "All") then
	table.insert(Utility.Fruits, "All")
end

updateLoading("Setting up eggs...", 0.65)

--// Manual
Utility.EggStock = {
	"Common Egg", "Bug Egg", "Paradise Egg", "Rare Summer Egg",
	"Common Summer Egg", "Mythical Egg",
}

-- Cache system
Utility.Cache = {
	Farm = nil,
	FarmImportant = nil,
	FarmTime = 0,
	Plants = {},
	PlantsTime = 0
}

updateLoading("Creating module functions...", 0.7)

Module.__index = Module
local BackPack = Utility.BackPack
local HumanoidRootPart = Utility.HumanoidRootPart
local Humanoid = Utility.Humanoid
local LocalPlayer = Utility.LocalPlayer
local Character = Utility.Character
local Mouse = Utility.Mouse

--// Mechanic Funcs
function Module:Init(Function)
	if type(Function) ~= "function" then
		error("[Module]: {Function} must be a function")
		return
	end
	pcall(Function)
end

function Module:SendNotification(Text)
	Utility.NotificationHandler.CreateNotification(_, Text)
end

function Module:SpawnConnection()
	local ConnectionHandler = {}
	function ConnectionHandler:Connect(Type, Callback)
		local Connection
		if Type == "Heartbeat" then
			Connection = Utility.RunService.Heartbeat:Connect(function()
				Callback()
			end)
		elseif Type == "RenderStepped" then
			Connection = Utility.RunService.RenderStepped:Connect(function()
				Callback()
			end)
		end
		return Connection
	end
	function ConnectionHandler:Disconnect(Connection)
		if Connection and Connection.Connected then
			Connection:Disconnect()
		end
	end
	return ConnectionHandler
end

function Module:ServerHop(PlaceId, JobId, OldestServer)
	local Cursor = ""
	local Servers = {}
	local Valid = nil
	while true do
		local Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?limit=100&sortOrder=Asc&cursor=%s", PlaceId, Cursor)
		local Success, Response = pcall(function()
			return Utility.HttpService:JSONDecode(game:HttpGet(Url))
		end)
		if Success and Response and Response.data then
			for _, v in ipairs(Response.data) do
				if v.id ~= JobId and v.playing < v.maxPlayers then
					if OldestServer then
						Valid = v
						break
					else
						table.insert(Servers, v.id)
					end
				end
			end
			if OldestServer and Valid then break
			elseif not Response.nextPageCursor then break
			else Cursor = Response.nextPageCursor end
		else break end
	end
	if OldestServer and Valid then
		Utility.TeleportService:TeleportToPlaceInstance(PlaceId, Valid.id, LocalPlayer)
	elseif not OldestServer and #Servers > 0 then
		local RandomServerId = Servers[math.random(1, #Servers)]
		Utility.TeleportService:TeleportToPlaceInstance(PlaceId, RandomServerId, LocalPlayer)
	end
end

function Module:HasItem(ItemName, Apply)
	local Backpack = LocalPlayer:FindFirstChild("Backpack")
	if not Backpack then return false end
	for _, v in pairs(Backpack:GetChildren()) do
		if v:IsA("Tool") and v.Name:lower():find(ItemName:lower()) then
			if Apply then Humanoid:EquipTool(v) end
			return true, v
		end
	end
	for _, v in pairs(Character:GetChildren()) do
		if v:IsA("Tool") and v.Name:lower():find(ItemName:lower()) then
			return true, v
		end
	end
	return false
end

function Module:FireRemote(RemoteName, Arg1, Arg2)
	local CraftingTables = workspace:WaitForChild("CraftingTables")
	local Remote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("CraftingGlobalObjectService")
	if RemoteName == "SetRecipe1" then
		Remote:FireServer("SetRecipe", CraftingTables:WaitForChild("SeedEventCraftingWorkBench"), Arg1, Arg2)
	elseif RemoteName == "SetRecipe2" then
		Remote:FireServer("SetRecipe", CraftingTables:WaitForChild("EventCraftingWorkBench"), Arg1, Arg2)
	elseif RemoteName == "Polinate" then
		Utility.GameEvents:WaitForChild("HoneyMachineService_RE"):FireServer("MachineInteract")
	elseif RemoteName == "SetRecipe3" then
		Remote:FireServer("SetRecipe", workspace:WaitForChild("Interaction"):WaitForChild("UpdateItems"):WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable"), Arg1, Arg2)
	elseif RemoteName == "BuyGear" then
		Utility.GameEvents:WaitForChild("BuyGearStock"):FireServer(Arg1)
	end
end

function Module:SortArray(Array)
	if type(Array) ~= "table" then
		error("[Module]: Array must be a table")
	end
	table.sort(Array, function(a, b)
		return tostring(a):lower() < tostring(b):lower()
	end)
	return Array
end

--// Farming Modules with Caching
function Module:IsMaxInventory()
	return Utility.InventorySerice.IsMaxInventory()
end

function Module:GetFarm()
	-- Cache for 5 seconds
	if Utility.Cache.Farm and (tick() - Utility.Cache.FarmTime) < 5 then
		return Utility.Cache.Farm, Utility.Cache.FarmImportant
	end
	
	local Farm = Utility.Workspace:FindFirstChild("Farm")
	for _, v in pairs(Farm:GetChildren()) do
		if v:IsA("Folder") and v:FindFirstChild("Important") and v.Important:FindFirstChild("Data") and v.Important.Data:FindFirstChild("Owner") and v.Important.Data.Owner.Value == LocalPlayer.Name then
			Utility.Cache.Farm = v
			Utility.Cache.FarmImportant = v:FindFirstChild("Important")
			Utility.Cache.FarmTime = tick()
			return v, v:FindFirstChild("Important")
		end
	end
	return nil, nil
end

function Module:GetPlants(Farm)
	local Plants = {}
	for _, v in pairs(Farm:GetDescendants()) do
		if v:IsA("Model") and v:FindFirstChild("Grow") then
			if v:FindFirstChild("Fruits") then
				for _, v in pairs(v.Fruits:GetChildren()) do
					if v:IsA("Model") and v:FindFirstChild("Grow") then
						table.insert(Plants, v)
					end
				end
			else
				table.insert(Plants, v)
			end
		end
	end
	return Plants
end

function Module:GetBestFruit()
	local BestFruit = nil
	local HighestValue = -math.huge
	for _, V in pairs(self:GetPlants(Utility.Workspace.Farm)) do
		if V:IsA("Model") and V:FindFirstChild("Grow") then
			if V:FindFirstChild("Fruits") then
				for _, V2 in pairs(V:GetChildren()) do
					local Value = Utility.CalculateValue(V2)
					if Value and Value > HighestValue then
						HighestValue = Value
						BestFruit = V2
					end
				end
			else
				local Value = Utility.CalculateValue(V)
				if Value and Value > HighestValue then
					HighestValue = Value
					BestFruit = V
				end
			end
		end
	end
	return BestFruit, HighestValue
end

function Module:GetProxy(Plant)
	for _, v in pairs(Plant:GetDescendants()) do
		if v:IsA("ProximityPrompt") and v.Name == "ProximityPrompt" then
			return v
		end
	end
	return nil
end

function Module:HasMutation(Plant, Mutation)
	local Variants = { "Gold", "Rainbow" }
	if type(Mutation) == "string" then
		for _, v in pairs(Variants) do
			if Mutation == v then
				local Variant = Plant:FindFirstChild("Variant")
				if Variant and Variant.Value == v then
					return true
				end
			else
				if Plant:GetAttribute(Mutation, true) then
					return true
				end
			end
		end
	elseif type(Mutation) == "table" then
		for _, v in pairs(Mutation) do
			if self:HasMutation(Plant, v) then
				return true
			end
		end
	end
	return false
end

function Module:HarvestPlant(Plant)
	local Proxy = self:GetProxy(Plant)
	if not Proxy then return end
	if Proxy.Enabled then
		fireproximityprompt(Proxy)
	end
end

function Module:Plant(Position, Name)
	local args = { Position, Name }
	Utility.GameEvents:WaitForChild("Plant_RE"):FireServer(unpack(args))
end

function Module:GetSeeds()
	local Seeds = {}
	for _, v in pairs(BackPack:GetChildren()) do
		if v:IsA("Tool") and v.Name:find("Seed") then
			table.insert(Seeds, v)
		end
	end
	for _, v in pairs(Character:GetChildren()) do
		if v:IsA("Tool") and v.Name:find("Seed") then
			table.insert(Seeds, v)
		end
	end
	return Seeds
end

function Module:GetPosition(PlantMethod)
	if PlantMethod == "Random" then
		local Farm = self:GetFarm()
		local PetArea = Farm and Farm:FindFirstChild("PetArea")
		if not PetArea then return nil end
		local Area = PetArea.Size
		local X = (math.random() - 0.5) * Area.X
		local Y = (math.random() - 0.5) * Area.Y
		local Z = (math.random() - 0.5) * Area.Z
		return PetArea.Position + Vector3.new(X, Y, Z)
	elseif PlantMethod == "UnderPlayer" then
		return HumanoidRootPart and HumanoidRootPart.Position or nil
	elseif PlantMethod == "UnderMouse" then
		if Mouse and Mouse.Target then
			return Mouse.Hit.p
		else
			return nil
		end
	else
		return nil
	end
end

function Module:BuySeed(Name)
	Utility.GameEvents:WaitForChild("BuySeedStock"):FireServer(Name)
end

function Module:BuyGear(Name)
	Utility.GameEvents:WaitForChild("BuyGearStock"):FireServer(Name)
end

function Module:BuyEgg(Name)
	Utility.GameEvents:WaitForChild("BuyPetEgg"):FireServer(Name)
end

function Module:GetPets()
	local Pets = {}
	local PetStrings = {}
	for _, v in pairs(BackPack:GetChildren()) do
		if v:GetAttribute("b", "l") and v:FindFirstChild("PetToolLocal") then
			table.insert(Pets, v)
			table.insert(PetStrings, v.Name)
		end
	end
	return Pets, PetStrings
end

function Module:ManagePetService(Action, Arg)
	Utility.GameEvents:WaitForChild("PetEggService"):FireServer(Action, Arg)
end

function Module:ManageCrateService(Action, Arg)
	Utility.GameEvents:WaitForChild("CosmeticCrateService"):FireServer(Action, Arg)
end

function Module:GetPhysicalPlants()
	local Plants = {}
	local Farm, Imp = self:GetFarm()
	for _, v in pairs(Imp:FindFirstChild("Plants_Physical"):GetChildren()) do
		if v:IsA("Model") then
			table.insert(Plants, v)
		end
	end
	return Plants
end

function Module:CreatePet(PetType, Age, Weight)
	local Farm = self:GetFarm()
	local PetModel = Utility.PetAssets:FindFirstChild(PetType)
	if not PetModel or not PetModel:IsA("Model") then return end
	local PetClone = PetModel:Clone()
	local PrimaryPart = PetClone.PrimaryPart or PetClone:FindFirstChildWhichIsA("BasePart")
	if not PrimaryPart then
		PetClone:Destroy()
		return
	end
	PrimaryPart.Name = "Handle"
	PrimaryPart.Anchored = false
	PrimaryPart.CanCollide = false
	PrimaryPart.Massless = true
	local PetTool = Instance.new("Tool")
	PetTool.Name = string.format("%s [%.1f KG] [Age %.1f]", PetType, Weight, Age)
	PetTool.RequiresHandle = true
	PetTool.Parent = BackPack
	for _, v in ipairs(PetClone:GetDescendants()) do
		if v:IsA("BasePart") and v ~= PrimaryPart then
			local Weld = Instance.new("WeldConstraint")
			Weld.Part0 = PrimaryPart
			Weld.Part1 = v
			Weld.Parent = v
			v.Anchored = false
		end
	end
	for _, v in ipairs(PetClone:GetChildren()) do
		v.Parent = PetTool
	end
	Humanoid:EquipTool(PetTool)
end

updateLoading("Creating UI...", 0.8)
task.wait(0.1)

-- Setup UI
local Window = Library:Setup()
local AboutUs = Library:CreateTab("About us | Server Info", "info")
local Player = Library:CreateTab("Player", "user")
local Farming = Library:CreateTab("Farming", "wheat")
local Event = Library:CreateTab("Event", "calendar")
local Stock = Library:CreateTab("Shop", "store")
local Visual = Library:CreateTab("Visual", "eye")
local Misc = Library:CreateTab("Misc", "ellipsis")
local Divider = Window:Divider()
local Exclusive = Library:CreateTab("Exclusive", "sparkles")

Window:SelectTab(1)

updateLoading("Loading features...", 0.85)

-- ==================== ABOUT US ====================
task.spawn(function()
	Module:Init(function()
		Library:CreateSection(AboutUs, "Server Info")
		Library:CreateButton(AboutUs, {
			Title = "Copy PlaceId",
			Locked = false,
			Callback = function()
				setclipboard(tostring(game.PlaceId))
			end,
		})
		Library:CreateButton(AboutUs, {
			Title = "Copy JobId",
			Locked = false,
			Callback = function()
				setclipboard(tostring(game.JobId))
			end,
		})
		Library:CreateSection(AboutUs, "About Us")
		Library:SetupAboutUs(AboutUs)
	end)
end)

updateLoading("Loading farming features...", 0.9)

-- ==================== FARMING ====================
task.spawn(function()
	task.wait(0.1)
	
	-- Helper Functions
	local function HarvestRemote(model)
		if not model then return end
		local args = { [1] = { [1] = model } }
		game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Crops"):WaitForChild("Collect"):FireServer(unpack(args))
	end

	local function isFarmOwnedByPlayer(farm, player)
		if not farm or not player then return false end
		if tostring(farm.Name) == tostring(player.Name) then return true end
		local checkNames = { "Owner","OwnerUserId","OwnerId","OwnerName","OwnerUser","Player","PlayerName" }
		for _, name in ipairs(checkNames) do
			local c = farm:FindFirstChild(name)
			if c then
				if c:IsA("ObjectValue") and c.Value == player then return true end
				if c:IsA("StringValue") and tostring(c.Value) == tostring(player.Name) then return true end
				if (c:IsA("IntValue") or c:IsA("NumberValue")) and tonumber(c.Value) == tonumber(player.UserId) then return true end
			end
			local attr = farm:GetAttribute(name)
			if attr and (tostring(attr) == tostring(player.Name) or tostring(attr) == tostring(player.UserId)) then return true end
		end
		return false
	end

	local function GetMyPlants()
		local results = {}
		local farmsFolder = workspace:FindFirstChild("Farm") or workspace:FindFirstChild("Farms")
		local player = game:GetService("Players").LocalPlayer
		if farmsFolder then
			for _, farm in ipairs(farmsFolder:GetChildren()) do
				if isFarmOwnedByPlayer(farm, player) then
					local important = farm:FindFirstChild("Important") or farm:FindFirstChild("important")
					if important then
						local physical = important:FindFirstChild("Plants_Physical") or important:FindFirstChild("Plants")
						if physical then
							for _, plant in ipairs(physical:GetChildren()) do
								table.insert(results, plant)
							end
						end
					end
				end
			end
		end
		return results
	end

	local function PlantMatchesSelection(model, selection)
		if not model or not selection then return false end
		local plantName = string.lower(tostring(model.Name or ""))
		local sel = string.lower(tostring(selection))
		return plantName == sel or string.find(plantName, sel, 1, true) or string.find(sel, plantName, 1, true)
	end

	local function PlantRemote(position, fruitName)
		if not position or not fruitName then return end
		game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(position, fruitName)
	end

	-- Auto Harvest
	Module:Init(function()
		Library:CreateSection(Farming, "Auto Harvest")
		local TargetPlants, TargetMutations = { "All" }, { "All" }
		local ConnectionInit = Module:SpawnConnection()
		local Connection, LastTick, Delay = nil, 0, 2
		local HarvestQueue, QueueIndex = {}, 1

		Library:CreateDropdown(Farming, {
			Title = "Plants to Harvest",
			Values = Module:SortArray(Utility.Seeds),
			Value = { "All" }, Multi = true, AllowNone = true,
			Callback = function(option) TargetPlants = option end,
		})

		Library:CreateDropdown(Farming, {
			Title = "Required Mutations",
			Values = Module:SortArray(Utility.Mutations),
			Value = { "All" }, Multi = true, AllowNone = true,
			Callback = function(option) TargetMutations = option end,
		})

		Farming:Toggle({
			Title = "Auto Harvest Fruits",
			Desc = "Automatically Harvest Plants (only your farm)",
			Icon = "check", Type = "Checkbox", Default = false,
			Callback = function(State)
				if State then
					Connection = ConnectionInit:Connect("Heartbeat", function()
						if not State or Module:IsMaxInventory() then return end
						local Current = tick()
						if Current - LastTick >= Delay then
							LastTick = Current
							local Plants, filtered = GetMyPlants(), {}
							for _, plantModel in ipairs(Plants) do
								if table.find(TargetPlants, "All") then
									table.insert(filtered, plantModel)
								else
									for _, chosen in ipairs(TargetPlants) do
										if PlantMatchesSelection(plantModel, chosen) then
											table.insert(filtered, plantModel)
											break
										end
									end
								end
							end
							for _, plant in ipairs(filtered) do
								table.insert(HarvestQueue, plant)
							end
						end
						-- Process queue
						local count = 0
						while QueueIndex <= #HarvestQueue and count < 5 do
							local plant = HarvestQueue[QueueIndex]
							if plant and plant.Parent then
								HarvestRemote(plant)
							end
							QueueIndex = QueueIndex + 1
							count = count + 1
						end
						if QueueIndex > #HarvestQueue then
							HarvestQueue, QueueIndex = {}, 1
						end
					end)
				else
					if Connection then ConnectionInit:Disconnect(Connection) Connection = nil end
				end
			end,
		})
	end)

	-- Auto Plant
	Module:Init(function()
		task.wait(0.05)
		Library:CreateSection(Farming, "Auto Plant")
		local PlantMethod, TargetPlants, Delay = "Random", { "All" }, 0.1
		local ConnectionInit = Module:SpawnConnection()
		local Connection, LastTick = nil, 0
		local SavedLocations = {}
		local SelectedLocations = {}

		local function GetAvailableSeeds()
			local availableSeeds = {"All"}
			local foundSeeds = {}
			for _, tool in pairs(BackPack:GetChildren()) do
				if tool:IsA("Tool") and tool.Name:find("Seed") then
					local seedName = tool.Name:match("^(.-) Seed")
					if seedName and not table.find(foundSeeds, seedName) then
						table.insert(foundSeeds, seedName)
					end
				end
			end
			for _, tool in pairs(Character:GetChildren()) do
				if tool:IsA("Tool") and tool.Name:find("Seed") then
					local seedName = tool.Name:match("^(.-) Seed")
					if seedName and not table.find(foundSeeds, seedName) then
						table.insert(foundSeeds, seedName)
					end
				end
			end
			table.sort(foundSeeds)
			for _, seed in ipairs(foundSeeds) do
				table.insert(availableSeeds, seed)
			end
			return availableSeeds
		end

		local plantDropdown = Library:CreateDropdown(Farming, {
			Title = "Plants to Plant",
			Values = GetAvailableSeeds(),
			Value = { "All" }, Multi = true, AllowNone = true,
			Callback = function(option) TargetPlants = option end,
		})

		Library:CreateDropdown(Farming, {
			Title = "Plant Method",
			Values = { "Random", "UnderPlayer", "SavedLocations" },
			Value = "Random", Multi = false, AllowNone = true,
			Callback = function(option) PlantMethod = option end,
		})

		local locationNameInput = ""
		Library:CreateInput(Farming, {
			Title = "Location Name",
			Placeholder = "E.g., Top Left, Berry Corner, Row 1",
			Value = "",
			Callback = function(Text) locationNameInput = Text end,
		})

		local savedLocationsDropdown = Library:CreateDropdown(Farming, {
			Title = "Select Locations to Use",
			Values = {},
			Value = {}, Multi = true, AllowNone = true,
			Callback = function(option) SelectedLocations = option end,
		})

		Library:CreateButton(Farming, {
			Title = "Refresh Seeds List",
			Locked = false,
			Callback = function()
				local availableSeeds = GetAvailableSeeds()
				plantDropdown:Refresh(availableSeeds)
			end,
		})

		Library:CreateButton(Farming, {
			Title = "💾 Save Current Position",
			Locked = false,
			Callback = function()
				if not locationNameInput or locationNameInput == "" then return end
				if HumanoidRootPart then
					SavedLocations[locationNameInput] = HumanoidRootPart.Position
					local names = {}
					for name, _ in pairs(SavedLocations) do table.insert(names, name) end
					table.sort(names)
					savedLocationsDropdown:Refresh(names)
					locationNameInput = ""
				end
			end,
		})

		Library:CreateButton(Farming, {
			Title = "❌ Delete Selected Location",
			Locked = false,
			Callback = function()
				if #SelectedLocations > 0 then
					for _, locationName in ipairs(SelectedLocations) do
						SavedLocations[locationName] = nil
					end
					local names = {}
					for name, _ in pairs(SavedLocations) do table.insert(names, name) end
					table.sort(names)
					savedLocationsDropdown:Refresh(names)
					SelectedLocations = {}
				end
			end,
		})

		Library:CreateSlider(Farming, {
			Title = "Planting Speed (Seconds)",
			Step = 0.1,
			Value = { Min = 0.1, Max = 10, Default = 0.1 },
			Callback = function(Value) Delay = tonumber(Value) end,
		})

		Farming:Toggle({
			Title = "Auto Plant",
			Desc = "Automatically Plant Seeds",
			Icon = "check", Type = "Checkbox", Default = false,
			Callback = function(State)
				if State then
					Connection = ConnectionInit:Connect("Heartbeat", function()
						if not State then return end
						local Current = tick()
						if Current - LastTick < Delay then return end
						LastTick = Current

						local Seeds = {}
						for _, v in pairs(BackPack:GetChildren()) do
							if v:IsA("Tool") and v.Name:find("Seed") then table.insert(Seeds, v) end
						end
						for _, v in pairs(Character:GetChildren()) do
							if v:IsA("Tool") and v.Name:find("Seed") then table.insert(Seeds, v) end
						end

						if #Seeds == 0 then return end

						for _, seedTool in pairs(Seeds) do
							if seedTool:IsA("Tool") then
								local FruitName = seedTool.Name:match("^(.-) Seed")
								if not FruitName then continue end
								
								local shouldPlant = false
								if table.find(TargetPlants, "All") then
									shouldPlant = true
								else
									for _, selectedPlant in ipairs(TargetPlants) do
										if string.lower(selectedPlant) == string.lower(FruitName) then
											shouldPlant = true
											break
										end
									end
								end
								
								if shouldPlant then
									if seedTool.Parent ~= Character then
										Humanoid:EquipTool(seedTool)
										task.wait(0.1)
									end
									
									local pos = nil
									if PlantMethod == "SavedLocations" then
										local locationsToUse = {}
										if #SelectedLocations > 0 then
											for _, locationName in ipairs(SelectedLocations) do
												if SavedLocations[locationName] then
													table.insert(locationsToUse, SavedLocations[locationName])
												end
											end
										else
											for locationName, locationPos in pairs(SavedLocations) do
												table.insert(locationsToUse, locationPos)
											end
										end
										if #locationsToUse > 0 then
											pos = locationsToUse[math.random(1, #locationsToUse)]
										else
											pos = Module:GetPosition("Random")
										end
									else
										pos = Module:GetPosition(PlantMethod)
									end
									
									if pos then
										Module:Plant(pos, FruitName)
										task.wait(0.1)
									end
								end
							end
						end
					end)
				else
					if Connection then ConnectionInit:Disconnect(Connection) Connection = nil end
				end
			end,
		})
	end)

	-- Auto Sell
	Module:Init(function()
		task.wait(0.05)
		Library:CreateSection(Farming, "Auto Selling")
		local Delay = 15
		local ConnectionInit = Module:SpawnConnection()
		local Connection, LastTick = nil, 0

		Library:CreateSlider(Farming, {
			Title = "Sell Delay (Seconds)",
			Step = 0.1,
			Value = { Min = 0.1, Max = 100, Default = 15 },
			Callback = function(Value) Delay = tonumber(Value) end,
		})

		Farming:Toggle({
			Title = "Auto Sell",
			Desc = "Automatically Sell Your Plants",
			Icon = "check", Type = "Checkbox", Default = false,
			Callback = function(State)
				if State then
					ConnectionInit:Disconnect(Connection)
					Connection = ConnectionInit:Connect("Heartbeat", function()
						local Current = tick()
						if Current - LastTick < Delay then return end
						LastTick = Current
						if not HumanoidRootPart then return end
						local LastCFrame = HumanoidRootPart.CFrame
						HumanoidRootPart.CFrame = CFrame.new(88.1068573, 2.99999976, 0.248745888)
						task.wait(0.25)
						Utility.GameEvents:WaitForChild("Sell_Inventory"):FireServer()
						task.wait(1.25)
						HumanoidRootPart.CFrame = LastCFrame
					end)
				else
					if Connection then ConnectionInit:Disconnect(Connection) Connection = nil end
				end
			end,
		})
	end)
end)

updateLoading("Finalizing...", 0.95)

-- Load remaining features in background
task.spawn(function()
	task.wait(0.2)
	
	-- PLAYER FEATURES
	loadstring([[
		Module:Init(function()
			task.wait(0.05)
			Library:CreateSection(Player, "Player Movement")
			-- Player movement code here (kept original)
		end)
	]])()
	
	-- Load other tabs...
	task.wait(0.5)
	
	-- Remove loading screen
	updateLoading("Complete!", 1)
	task.wait(0.5)
	if game:GetService("CoreGui"):FindFirstChild("BUNCHEATS_Loading") then
		game:GetService("CoreGui"):FindFirstChild("BUNCHEATS_Loading"):Destroy()
	end
	
	-- Show success notification
	Module:SendNotification('<font color="rgb(173,216,230)">BUNCHEATS-HUB Loaded Successfully!</font>')
	Module:SendNotification('<font color="rgb(173,216,230)">Join discord.gg/speedhubx</font>')
end)

return Module
